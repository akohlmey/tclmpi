Compilation:

The core parts  of the package consist  of a single C  source file which
can be compiled either for dynamic linkage  or to be compiled into a new
Tcl  interpreter with  the TclMPI  package included  and two  Tcl script
files tclmpi.tcl and  pkgIndex.tcl, that interface the  compiled code to
the Tcl  interpreter.  In addition a  folder with examples and  a folder
with unittests and a custom test harness are provided.

The TclMPI package  uses CMake for building,  installation, testing, and
packaging.  This requires  a somewhat modern CMake  version (3.16).  You
need  to run  CMake the  usual way  `cmake -B  build-folder .`  and then
`cmake   --build    build-folder`,   followed   by    `cmake   --install
build-folder`. Tcl version 8.6 with support for development is required.

Documentation in HTML and PDF format is generated from doxygen and
pdflatex, if available.

To compile the package adjust the settings in  the Makefile according to
your platform, MPI and Tcl installation.  Typical settings for Linux and
MacOSX systems are included as comments  in the provided makefile.  Then
type   "make" to compile the   _tclmpi.so file; type  "make tclmpish" to
compile  the extended Tcl shell interpreter.   With "make check" you can
run  the integrated unit    tests to see if    everything is working  as
expected and "make check-static" will do the  corresponding test for the
extended  shell  binary..   With  "make  doc" the  documentation  can be
updated and "make all" will run all steps together.

Installation:

To install you choose a suitable prefix folder with `-DCMAKE_INSTALL_PREFIX`
when configuring with CMake and then can use `cmake --install <builddir>`
e.g.  /usr/local. The files _tclmpi.so,  tclmpi.tcl and pkgIndex.tcl would
then be installed into /usr/local/lib64/tcl8.6/tclmpi1.1. To enable loading
the plugin 'set auto_path [concat /usr/local/lib64/tcl8.6 $auto_path]' in
your .tclshrc or set the environment variable TCLLIBPATH to include that
folder.  One can load the  tclmpi wrappers  on demand simply   by using the   command
'package require tclmpi'.

Testing and packaging:

The included unit tests can be run (in serial and parallel) using the `ctest`
command, and the `cpack` command can be used to produce binary packages.
