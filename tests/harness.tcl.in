###########################################################
# Test harness for TclMPI
#
# Copyright (c) 2012 Axel Kohlmeyer <akohlmey@gmail.com>
# All Rights Reserved.
# 
# See the file LICENSE in the top level directory for
# licensing conditions.
###########################################################

## TclMPI test harness
# This namespace contains several Tcl procedures that
# are used to conduct unit tests on the TclMPI package.
# For simplicity paths are hardcoded, so that this file
# must not be moved around and stay in the same directory
# as the individual tests, which in turn have to be in
# subdirectory of the directory where the TclMPI shared
# object and/or the tclmpish extended Tcl shell reside.

# extend package search path to find TclMPI
set auto_path [concat [file normalize ..] $auto_path]

namespace eval tclmpi_test {
    
    set version "@VERSION@"  ;#< version of the package

    # define some convenience variables
    variable comm   tclmpi::comm_world ;#< shortcut for world communicator

    variable master 0              ;#< rank of MPI master process
    variable rank   0              ;#< rank of this MPI process on $comm
    variable size   1              ;#< number of processes on $comm
    variable int    tclmpi::int    ;#< shortcut for tclmpi::int data type
    variable intint tclmpi::intint ;#< shortcut for tclmpi::intint data type
    variable maxloc tclmpi::maxloc ;#< shortcut for tclmpi::maxloc operator
    variable minloc tclmpi::minloc ;#< shortcut for tclmpi::minloc operator

    # counters for successful and failed tests
    variable pass 0                ;#< counter for successful tests
    variable fail 0                ;#< counter for failed tests

    # export public functions
    namespace export ser_init par_init test_summary \
        run_return run_error par_return par_error
}

## format output
# \param kind string representing the kind of test (max 11 chars).
# \param cmd string representing the command. will be truncated as needed.
# \param result string indicating the result (PASS or FAIL/reason)
# \return the formatted string
# 
# This function will format a test summary message, so that it does
# not break the output on a regular terminal screen. The first column
# will be the total number of the test computed from the sum of passed
# and failed tests, followed by a string describing the test type,
# the command executed and a result string. The command string in the
# middle will be truncated as needed to not break the format.
proc tclmpi_test::test_format {kind cmd result} {
    variable pass
    variable fail

    set num [expr {$pass + $fail}]
    set string [format "%03d %-11s | %-46s | " $num $kind $cmd]
    if {[string length $string] > 66} {
        set string [string range $string 0 59]
        append string {... | }
    }
    append string $result
    return $string
}

## partial result and error message comparison
# \param reflist list of strings that have to appear in the result
# \param result result string
# \return 1 if all reflist strings were found in result
# 
# This function does an inexact comparison of the reference data
# to the actual result. The reference is a list of strings, each
# of which has to be matched in a case insensitive string search.
# The function returns a 1 if all tests did match.
proc tclmpi_test::compare {reflist result} {
    set count 0

    set res [string tolower $result]
    foreach ref $reflist {
        incr count
        if {[string first $ref $res] < 0} {
            return 0
        }
    }

    if {($count == 0) && [string length $result] > 0} {
        return 0
    } else {
        return 1
    }
}


## init for serial tests
# \param args all parameters are ignored
# \return empty
#
# This function will perform a simple init test requesting the tclmpi
# package and matching it against the current verison number. It will
# also initialize some commonly used global variables.
# If called from a parallel environment, it will only execute and
# produce output on the master process
proc tclmpi_test::ser_init {args} {
    variable version
    variable rank
    variable master

    # make some shortcuts
    global comm self null auto int double intint dblint
    set comm   tclmpi::comm_world
    set self   tclmpi::comm_self
    set null   tclmpi::comm_null
    set auto   tclmpi::auto
    set int    tclmpi::int
    set double tclmpi::double
    set intint tclmpi::intint
    set dblint tclmpi::dblint

    if {$rank == $master} {
        puts {------------------------------------------------------------------------------}
        run_return "package require tclmpi $version" $version
    }
    return {}
}

## init for parallel tests
# \param args all parameters are ignored
# \return empty
#
# This function will perform an initialization of the parallel environment
# for subsequent parallel tests. It also initializes the global variables
# $rank and $size.
proc tclmpi_test::par_init {args} {
    variable comm
    variable rank
    variable size

    package require tclmpi
    ::tclmpi::init
    # keep going with data conversion errors in parallel
    ::tclmpi::conv_set tclmpi::tozero
    set rank [::tclmpi::comm_rank $comm]
    set size [::tclmpi::comm_size $comm]

    ser_init
}

## run a serial test that is expected to succeed
# \param cmd string or list with the command to execute
# \param retval expected return value contents
# \return empty
#
# This function executes the command line passed in $cmd and intercepts its
# resulting return value using the 'catch' command. The actual return value is
# then compared against the expected reference passed in $retval. The
# test is passed if the two strings match, otherwise failure is reported
# and both the expected and actual results are printed. Also an unexpectedly
# failure of the command is reported as failure and the resulting error
# message is reported for debugging.
proc tclmpi_test::run_return {cmd retval} {
    variable pass
    variable fail

    if {[catch $cmd result]} {
        incr fail
        puts [test_format {check/run} $cmd {FAIL/abort}]
        puts "$fail/Error message [string tolower $result]"
    } else {
        if {[compare $retval $result]} {
            incr pass
            puts [test_format {check/run} $cmd PASS]
        } else {
            incr fail
            puts [test_format {check/run} $cmd {FAIL/retval}]
            puts "$fail/Expected $retval"
            puts "$fail/Received [string tolower $result]"
        }
    }
    return {}
}

## run a serial test that is expected to fail
# \param cmd string or list with the command to execute
# \param errormsg expected error message contents
# \return empty
#
# This function executes the command line passed in $cmd and intercepts its
# resulting error using the 'catch' command. The actual error message is
# then compared against the expected reference passed in $errormsg. The
# test is passed if the two strings match, otherwise failure is reported
# and both the expected and actual error messages are printed. Also an
# unexpectedly successful execution is considered a failure and its result
# reported for reference.
proc tclmpi_test::run_error {cmd errormsg} {
    variable pass
    variable fail

    if {[catch $cmd result]} {
        if {[compare $errormsg $result]} {
            incr pass
            puts [test_format {check/fail} $cmd PASS];
        } else {
            incr fail
            puts [test_format {check/fail} $cmd {FAIL/errmsg}]
            puts "$fail/Expected $errormsg"
            puts "$fail/Received [string tolower $result]"
        }
    } else {
        incr fail
        puts [test_format {check/fail} $cmd {FAIL/noerr}]
        puts "$fail/Result [string tolower $result]"
    }
    return {}
}

## run a parallel test that is expected to succeed
# \param cmd list of strings or lists with the commands to execute
# \param retval list of the expected return values
# \param comm communicator. defaults to world communicator
# \return empty
#
# This function executes the lists command lines passed in $cmd in parallel
# each command taken from the list based on the rank of the individual MPI
# task on the communicator and intercepts its resulting return value using
# the 'catch' command. The actual return value is then compared against the
# expected reference passed in the $retval list, similarly assigned to the
# individual ranks as the commands. The result is compared on all ranks and
# if one of the commands failed or the actual return value is not equal to the
# expected one, failure is reported and both, expected and and actual results
# are printed on one of the failing ranks. The error reporting expects that
# the MPI communicator remains usable after failure.
proc tclmpi_test::par_return {cmd retval {comm tclmpi::comm_world}} {
    variable pass
    variable fail
    variable master
    variable int
    variable intint
    variable maxloc
    variable minloc

    flush stdout
    ::tclmpi::barrier $comm
    set size [::tclmpi::comm_size $comm]
    set rank [::tclmpi::comm_rank $comm]

    set num [llength $cmd]
    if {$num < $size} {
        incr fail
        if {$rank == $master} {
            puts [test_format {par/run} \
                      "number of commands ($num) < $size" {FAIL/input}]
        }
        return {}
    }
    set num [llength $retval]
    if {$num < $size} {
        incr fail
        if {$rank == $master} {
            puts [test_format {par/run} \
                      "number of return values ($num) < $size" {FAIL/input}]
        }
        return {}
    }

    ::tclmpi::barrier $comm
    set cmd [lindex $cmd $rank]
    set retval [lindex $retval $rank]
    set res [::tclmpi::allreduce [list [list [catch $cmd result] $rank]] \
                 $intint $maxloc $comm]

    # all parallel commands came through
    if {[lindex $res 0 0] == 0} {
        set res [::tclmpi::allreduce \
                     [list [list [compare $retval $result] $rank]] \
                     $intint $minloc $comm]
        if {[lindex $res 0 0] == 0} {
            incr fail
            if {$rank == [lindex $res 0 1]} {
                puts [test_format {par/run} $cmd {FAIL/retval}]
                puts "$fail/Expected $retval"
                puts "$fail/Received [string tolower $result] on rank $rank"
            }
        } else {
            incr pass
            if {$rank == $master} {
                puts [test_format {par/run} $cmd PASS]
            }
        }

    # at least one parallel command failed
    } else {
        incr fail
        if {$rank == [lindex $res 0 1]} {
            puts [test_format {par/run} $cmd {FAIL/abort}]
            puts "$fail/Error message [string tolower $result] on rank $rank"
        }
    }
    ::tclmpi::barrier $comm
    flush stdout
    return {}
}

## run a parallel test that is expected to produce a Tcl error
# \param cmd list of strings or lists with the commands to execute
# \param retval list of the expected error message(s) or return values
# \param comm communicator. defaults to world communicator
# \return empty
#
# This function executes the lists command lines passed in $cmd in parallel
# each command taken from the list based on the rank of the individual MPI
# task on the communicator and intercepts its resulting error message or 
# return value using the 'catch' command. It is then checked if one of the 
# commands failed as expected and actual return value are then compared
# against the expected reference passed in the $retval list with similar
# assignments to the individual ranks as the commands.
# If one of the strings does not match or all command unexpectedly succeeded
# failure is reported otherwise success.
proc tclmpi_test::par_error {cmd retval {comm tclmpi::comm_world}} {
    variable pass
    variable fail
    variable master
    variable int
    variable intint
    variable maxloc
    variable minloc

    flush stdout
    ::tclmpi::barrier $comm
    set size [::tclmpi::comm_size $comm]
    set rank [::tclmpi::comm_rank $comm]

    set num [llength $cmd]
    if {$num < $size} {
        incr fail
        if {$rank == $master} {
            puts [test_format {par/fail} \
                      "number of commands ($num) < $size" {FAIL/input}]
        }
        return {}
    }
    set num [llength $retval]
    if {$num < $size} {
        incr fail
        if {$rank == $master} {
            puts [test_format {par/fail} \
                      "number of return values ($num) < $size" {FAIL/input}]
        }
        return {}
    }
    ::tclmpi::barrier $comm

    set cmd [lindex $cmd $rank]
    set retval [lindex $retval $rank]
    set res [::tclmpi::allreduce [list [list [catch $cmd result] $rank]] \
                 $intint $maxloc $comm]

    # at least one parallel command failed
    if {[lindex $res 0 0] == 1} {
        set res [::tclmpi::allreduce \
                     [list [list [compare $retval $result] $rank]] \
                     $intint $minloc $comm]
        if {[lindex $res 0 0] > 0} {
            incr pass
            if {$rank == $master} {
                puts [test_format {par/fail} $cmd PASS]
            }
        } else {
            incr fail
            if {$rank == [lindex $res 0 1]} {
                puts [test_format {par/fail} $cmd {FAIL/retval}]
                puts "$fail/Expected $retval"
                puts "$fail/Received [string tolower $result] on rank $rank"
            }
        }

    # all completed
    } else {
        incr fail
        if {$rank != [lindex $res 0 1]} {
            puts [test_format {par/fail} $cmd {FAIL/noerr}]
            puts "$fail/Error message [string tolower $result] on rank $rank"
        }
    }
    ::tclmpi::barrier $comm
    flush stdout
    return {}
}

## print result summary
# \param section number of the test section
# \return empty
#
# This function will print a nicely formatted summary
# of the tests. If executed in parallel only the master
# rank of the world communicator will produce output.
# 
proc tclmpi_test::test_summary {section} {
    variable pass
    variable fail
    variable rank
    variable master

    if {$rank == $master} {
        puts {------------------------------------------------------------------------------}
        puts [format {test section %02d | total pass: %03d | total fail: %03d} $section $pass $fail]
        puts {------------------------------------------------------------------------------}
    }
    if {$fail > 0} {
        exit $fail
    }
    return {}
}

# Local Variables:
# mode: tcl
# End:
